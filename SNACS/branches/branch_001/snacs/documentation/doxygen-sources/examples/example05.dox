/*!

\page Example05 Example 05 - Generating a channel impulse response file using a channel model

In this example we use the DLR land-mobile channel model to generate a channel impulse response (CIR) file. This file will contain realistic data of a vehcile driving through an urban environment.

Please go to http://www.kn-s.dlr.de/satnav and click on "get the model" to download the latest model version.

Extract the model to snacs/examples/LandMobileMultipathChannelModel30.

You can use the file generate_DLRLMS_urban_channel_saveas_SNACS_HDF5_CIF_file.m in the example05 directory to generate the CIR file for the SNACS simulation. The file is based on LandMobileMultipathChannel_Demo_UrbanCar.m from the channel model distribution. It is extended by parts to save the resulting CIR as a SNACS CIR input file. These parts are marked by "[for SNACS]" comments.

First, define the parameters:
\verbatim
%%for SNACS, initialize SNACS parameters sec
% write Parameters and ChannelParams to h5 file:
snacs_cir_filename = 'snacs-cir-file_DLRLMS_example-05.h5';
% [for SNACS] map the channel model parameter names to the SNACS CIR parameter names:
simulation_parameters.c0 = Co;
simulation_parameters.cir_rate = Parameters.SampFreq;
\endverbatim

At the beginning, we insert one second of a steady line-of-sight signal only to let the loops in the simulation settle:
\verbatim
% write only-LOS signal at the beginning of file.
% length 1 second. 1 s * cir_rate = number of only-LOS cirs:
only_los_offset = 1 * simulation_parameters.cir_rate; 

simulation_parameters.cir_amount = only_los_offset + Parameters.NumberOfSteps;

% [for SNACS] init the SNACS CIR HDF5 file:
init_snacs_cir_file(snacs_cir_filename, simulation_parameters);

% [for SNACS] no channel for the first second to let the loops lock.
% write one second of a A = 1 exp(j*0) component at delay = 0 s to the CIR
% file:
only_los_cir = struct('delay', {0}, 'real', {0}, 'imag', {0});
only_los_cir.delay = 0;
only_los_cir.real = 1;
only_los_cir.imag = 0;
% initialize vectors for the reference distance from transmitter 
% to receiver
ActualPR_vec = zeros(simulation_parameters.cir_amount, 1);
disp('writing only-LOS CIR snapshots...');
for k = 0:only_los_offset-1
    append_one_cir_to_cir_file(snacs_cir_filename, k, only_los_cir);
end
% the next written CIR will start with number: only_los_offset
\endverbatim

Later the channel model parameters are written to the CIR file:
\verbatim
%% for SNACS, write channel scenery parameters 
% write channel scenery parameters to HDF5 file:
hdf5write(snacs_cir_filename, '/parameters/model/channel_scenery' , ChannelParams, 'WriteMode', 'append');
\endverbatim

The main part follows: Here, the CIR as generated by the channel model is prepared to be written to the HDF5 file:
\verbatim
    %% [for SNACS], write cir to h5 file
    % For that we build one vector from
    % LOS and echoes first:
    % (dhv is the number of the actual CIR snapshot (starting with 1))
    clear echoes
    echoes_elements = numel(LOSDelays)+numel(DelayVec); % amount of echoes
    echo_zeros = zeros(echoes_elements, 1);
    echoes(1:echoes_elements) = struct('delay', {0}, 'real', {0}, 'imag', {0});
    for k = 1:numel(LOSDelays)
        echoes(k).delay = LOSDelays(k);
        echoes(k).real = real(LOS(k));
        echoes(k).imag = imag(LOS(k));
    end
    idx_offset = numel(LOSDelays);
    for k = 1:numel(DelayVec)
        echoes(k+idx_offset).delay = DelayVec(k);
        echoes(k+idx_offset).real = real(ComplexOutputVec(k));
        echoes(k+idx_offset).imag = imag(ComplexOutputVec(k));
    end
    cir_number = only_los_offset + dhv-1; % dhv-1: CIR number for SNACS should start at 0
    
\endverbatim

Finally, the CIR is written to the file:
\verbatim
    % only_los_offset is added because we added 1 second of a only los
    % component to the CIR file, see above.
    append_one_cir_to_cir_file(snacs_cir_filename, cir_number, echoes);
    
    ActualPR_vec(cir_number + 1) = ActualPR; % +1 since Matlab vectors start at 1

    disp(sprintf('written step #: %d, actual range: %f\n', cir_number, ActualPR));
\endverbatim

At the end, the reference distances are written to the HDF5 CIR file:
\verbatim
%% [for SNACS], write all reference range values
hdf5write(snacs_cir_filename, '/reference_range/range_absolut', ActualPR_vec, 'WriteMode', 'append');
\endverbatim

Also the file LandMobileMultipathChannelModel30/@LandMobileMultipathChannel/generate.m of the model distribution has to be changed to return the absolute reference range. Append the file by these two lines:
\verbatim
this.LastLOSPR = this.LastLOSPR + (this.SatVector*WayVec');
varargout{9}=this.LastLOSPR;
\endverbatim

Use the MATLAB script plot_DLRLMS_CIR_result_example05.m to display the output of the generated CIR:

\image html DLRLMS_cir-result.png "Resulting CIR of the DLR LMS channel model simulation"


This is the full MATLAB script:

\includelineno example_05/generate_DLRLMS_urban_channel_saveas_SNACS_HDF5_CIR_file.m

*/